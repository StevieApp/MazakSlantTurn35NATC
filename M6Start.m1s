''tool = GetSelectedTool()''SetCurrentTool( tool )If (GetOEMLED(809) Or GetOEMLED(807)) Then	Message "Please Home Machine First"	EndElseEnd IfOutToolPushOut = 2OutToolPushIn = 3OutToolChuck = 15OutToolCW = 4OutToolCCW = 5OutToolMove = 14OutDrillMove = 5OutProbeOpen = 0OutProbeClose = 1Const InTool1 = 12Const InTool2 = 13Const InTool3 = 14Const InTool4 = 15Const InToolSlottable = 17Const InDoor1 = 3Const InDoor2 = 4Const InProbeClosed = 11ZPositionLastCouple = 1821LastCouple = GetUserDRO(ZPositionLastCouple)Dim NewTool, OldToolMachMsgTypeYesNo = 4MachMsgReturnYes = 6 MachMsgReturnNo = 7RefX = 1ReFZ = 4HomeNegativeZ = 830Call CheckEstop()''Call PushToolIn()''Call PushToolOut()''Call RotateToolDrill()''Call ProbeClose()''Message "Hello " & Sub CheckEstop	If IsEStop() Then		Message "Please Remove EStop" 		Ret = MachMsg("Is Estop removed to proceed?","Estop Warning", MachMsgTypeYesNo) 		If Ret = MachMsgReturnYes Then 			Sleep(2000) 			Call CheckEstop() 		ElseIf Ret = MachMsgReturnNo Then 			Message "Cannot continue without Estop. Tool Changing Ended" 			End 		Else 			Message "Wrong Option. Tool Changing Ended" 			End 		End If	Else  		Message "Continuing..." 		Call CheckDoor()	End IfEnd SubSub CheckDoor	If Not (GetCsmioInEx(InDoor1) And GetCsmioInEx(InDoor2)) Then		Message "Continuing..."		Call CheckCurrentToolNo()	Else		Ret = MachMsg("Is the door closed to proceed?","Door Warning", MachMsgTypeYesNo) 		If Ret = MachMsgReturnYes Then 			Sleep(2000) 			Call CheckDoor() 		ElseIf Ret = MachMsgReturnNo Then 			Message "Cannot continue without door close. Tool Changing Ended" 			End 		Else 			Message "Wrong Option. Tool Changing Ended" 			End 		End If	End IfEnd SubSub CheckCurrentToolNo	Dim ToolComb, ToolNum	ToolComb = GetCombination()	ToolNum = SwCaseReverse(ToolComb)	NewTool = GetSelectedTool()	SetCurrentTool(ToolNum)	OldTool = GetCurrentTool()	Message "Current Tool is " & ToolNum	Call ToolAvailable()End SubSub ToolAvailable	If NewTool < 1 Or NewTool > 16 Then		Message "Tool Unavailable " & NewTool		End	Else		Call AlreadyHave()	End IfEnd SubSub AlreadyHave	If OldTool = NewTool Then		Message "Tool already in slot"		Call FarthestTail()	Else		Call GoToHome()	End IfEnd SubSub GoToHome	Call StopDrill()	Code("M5")	''Code("G28")	Code("G53G00X0")	Code("G53G00Z200")	While (IsMoving()) 		Sleep(100) 	Wend	Dim ProbeOpenState 		ProbeOpenState = CheckProbeOpen()	If ProbeOpenState = False Then		''Call ProbeClose()	Else	End If	Call Unslot()End SubSub CheckProbeOpen	CheckProbeOpen = GetCsmioIn(InProbeClosed)End Sub Sub Unslot	Call PushToolOut()	Sleep(100)	Call GetDistnDir()End SubSub GetDistnDir	Message "getDist " & NewTool & " " & OldTool	Dim CW, ConSteps	If(NewTool>OldTool) Then		CW = True	Else		CW = False	End If	ConSteps = Abs(NewTool - OldTool)	Message "Steps" & ConSteps	If Consteps > 8 Then		CW = Not CW	Else	End If	Call CWStopAt(NewTool, CW)End SubSub CWStopAt(ToolNum, CW)	Dim CurrComb, CurrNumber, NextNum, SleepTime	CurrComb = GetCombination()	NewComb = SwCase(ToolNum)	CurrNumber = SwCaseReverse(CurrComb)	Call SetCsmioOut(OutToolChuck, True)	Call StartMotion(CW)	Call CheckAndStop(NewComb, SleepTime, CW)End SubSub StartMotion(CW)	If CW = True Then		Call SetCsmioOut(OutToolCW, True)	ElseIf CW = False Then		Call SetCsmioOut(OutToolCCW, True)	Else		Message "No Direction"	End IfEnd SubSub ProbeOpen	Message "Probe Open..."	Call SetCsmioOutEx(OutProbeOpen, True)	Sleep(2200)	Call SetCsmioOutEx(OutProbeOpen, False)	Message "Probe Opened."End SubSub ProbeClose	Call SetCsmioOutEx(OutProbeClose, True)	Sleep(5200)	Call SetCsmioOutEx(OutProbeClose, False)End SubSub CheckAndStop(NewComb, SleepTime, CW)	Dim Combine, Slottable	Slottable = GetCsmioIn(InToolSlottable)	Combine = GetCombination()	While Combine <> NewComb		Combine = GetCombination()	Wend	While Slottable = True		Slottable = GetCsmioIn(InToolSlottable)	Wend	Call SetCsmioOut(OutToolChuck, False)	Sleep(1200)	Call EndMotion(CW)	''Message "Tool Lockable."	Call CheckStoppedTool()End SubSub EndMotion(CW)	If CW = True Then		Call SetCsmioOut(OutToolCW, False)	Else		Call SetCsmioOut(OutToolCCW, False)	End IfEnd SubSub CheckStoppedTool	Dim CurrComb	CurrComb = GetCombination()	CurrNumber = SwCaseReverse(CurrComb)	If CurrNumber = NewTool Then		Call SlotIn()	Else		OldTool = CurrNumber		Call GetDistnDir()	End IfEnd SubSub SlotIn	Sleep(100)	Call PushToolIn()	SetCurrentTool( NewTool )	Sleep(200)	Message "Tool " & NewTool & " Slotted"	Call FarthestTail()End SubSub FarthestTail	If(NewTool = 15 Or NewTool = 16) Then		Ret = MachMsg("Is the tailstock parked at +600 machine coordinates to avoid machine collision?","Clash Warning", MachMsgTypeYesNo) 		If Ret = MachMsgReturnYes Then			If LastCouple >= 600 Then				Message "Tool Change complete"				Sleep(1000)			Else				Message "TailStock is not in Safe Position for boring"				End			End If 			''Call CheckDoor() 		ElseIf Ret = MachMsgReturnNo Then 			Message "Cannot do boring without pushing tail stock to furthest position" 			End 		Else 			Message "Wrong Option. Tool Changing Ended" 			End 		End If	Else	End IfEnd SubSub PushToolOut	Message "Pushing Tool Out..."	Call SetCsmioOut(OutToolMove, True)	Call SetCsmioOut(OutToolPushOut, True)	Sleep(2200)	Call SetCsmioOut(OutToolPushOut, False)	Call SetCsmioOut(OutToolMove, False)	Message "Tool Out."End SubSub PushToolIn	Message "Pushing Tool In..."	Call SetCsmioOut(OutToolMove, True)	Call SetCsmioOut(OutToolPushIn, True)	Sleep(3000)	Call SetCsmioOut(OutToolPushIn, False)	Sleep(1000)	Call SetCsmioOut(OutToolMove, False)	Message "Tool In."End SubSub RotateToolDrill	Message "Drilling Tool In..."	Call SetCsmioOutEx(OutDrillMove, True)	Sleep(10000)	Call SetCsmioOutEx(OutDrillMove, False)	Message "Drilling Stopped."End SubSub StartDrill	Message "Drilling Tool In..."	Call SetCsmioOutEx(OutDrillMove, True)End SubSub StopDrill	Call SetCsmioOutEx(OutDrillMove, False)	Message "Drilling Stopped."End SubPublic Sub SwCase(ToolNum)	Dim Binari	Select Case ToolNum		Case 1			Binari = "0000"			Message "Tool 1 Selected 0000"		Case 2			Binari = "0001"			Message "Tool 2 Selected 0001"		Case 3			Binari = "0011"			Message "Tool 3 Selected 0011"		Case 4			Binari = "0010"			Message "Tool 4 Selected 0010"		Case 5			Binari = "1010"			Message "Tool 5 Selected 1010"		Case 6			Binari = "1011"			Message "Tool 6 Selected 1011"		Case 7			Binari = "1111"			Message "Tool 7 Selected 1111"		Case 8			Binari = "0111"			Message "Tool 8 Selected 0111"		Case 9			Binari = "0110"			Message "Tool 9 Selected 0110"		Case 10			Binari = "1110"			Message "Tool 10 Selected 1110"		Case 11			Binari = "1100"			Message "Tool 11 Selected 1100"		Case 12			Binari = "0100"			Message "Tool 12 Selected 0100"		Case 13			Binari = "0101"			Message "Tool 13 Selected 0101"		Case 14			Binari = "1101"			Message "Tool 14 Selected 1101"		Case 15			Binari = "1001"			Message "Tool 15 Selected 1001"		Case 16			Binari = "1000"			Message "Tool 16 Selected 1000"		Case Else			Message "Tool Out of Range"			Sleep(50)			End	End Select	SwCase = Binari  End SubPublic Sub SwCaseReverse(Comb)	Dim Namba	Select Case Comb		Case "0000"			Namba = 1			Message "Tool 1 Selected 0000"		Case "0001"			Namba = 2			Message "Tool 2 Selected 0001"		Case "0011"			Namba = 3			Message "Tool 3 Selected 0011"		Case "0010"			Namba = 4			Message "Tool 4 Selected 0010"		Case "1010"			Namba = 5			Message "Tool 5 Selected 1010"		Case "1011"			Namba = 6			Message "Tool 6 Selected 1011"		Case "1111"			Namba = 7			Message "Tool 7 Selected 1111"		Case "0111"			Namba = 8			Message "Tool 8 Selected 0111"		Case "0110"			Namba = 9			Message "Tool 9 Selected 0110"		Case "1110"			Namba = 10			Message "Tool 10 Selected 1110"		Case "1100"			Namba = 11			Message "Tool 11 Selected 1100"		Case "0100"			Namba = 12			Message "Tool 12 Selected 0100"		Case "0101"			Namba = 13			Message "Tool 13 Selected 0101"		Case "1101"			Namba = 14			Message "Tool 14 Selected 1101"		Case "1001"			Namba = 15			Message "Tool 15 Selected 1001"		Case "1000"			Namba = 16			Message "Tool 16 Selected 1000"		Case Else			Message "Tool Out of Range"			Sleep(50)			End	End Select	SwCaseReverse = Namba  End SubSub GetCombination()	Dim Comb	Comb = ""	If(GetCsmioIn(InTool1) = False) Then		Comb =  Comb + "0"	Else		Comb =  Comb + "1"	End If	If(GetCsmioIn(InTool2) = False) Then		Comb =  Comb + "0"	Else		Comb =  Comb + "1"	End If	If(GetCsmioIn(InTool3) = False) Then		Comb =  Comb + "0"	Else		Comb =  Comb + "1"	End If	If(GetCsmioIn(InTool4) = False) Then		Comb =  Comb + "0"	Else		Comb =  Comb + "1"	End If	GetCombination = CombEnd SubPublic Sub SetCsmioOut(ByVal n As Integer, ByVal state As Boolean)	If(state) Then		SetOutBit(90, n)	Else		ResetOutBit(90, n)	End IfEnd SubPublic Sub SetCsmioOutEx(ByVal n As Integer, ByVal state As Boolean)	If(state) Then		SetOutBit(100, n)	Else		ResetOutBit(100, n)	End IfEnd SubPublic Function GetCsmioIn(n As Integer) As Boolean	Dim reg As Integer	If(n<16) Then		reg = 90	Else		reg = 91		n = n-16	End If	If(GetInBit(reg, n)) Then		GetCsmioIn = true	Else		GetCsmioIn = False	End If	Exit FunctionEnd FunctionPublic Function GetCsmioInEx(n As Integer) As Boolean	Dim reg As Integer	If(n<16) Then		reg = 100	Else		reg = 101		n = n-16	End If	If(GetInBit(reg, n)) Then		GetCsmioInEx = true	Else		GetCsmioInEx = False	End If	Exit FunctionEnd Function                               